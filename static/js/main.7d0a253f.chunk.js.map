{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Card","_ref","id","name","email","hash","color","react_default","a","createElement","className","style","backgroundColor","src","concat","alt","CardList","robots","Fragment","map","r","src_components_Card","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","overflowY","height","children","randomColorChan","min","max","Math","floor","random","App","_this","Object","classCallCheck","this","_super","call","onSearchChange","event","setState","target","value","state","_this2","fetch","then","response","json","users","chance","require","Chance","i","length","twitter","slice","console","log","_this$state","filteredRobots","filter","robot","toLowerCase","includes","src_components_SearchBox","components_Scroll","components_CardList","React","Component","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","src_containers_App","document","getElementById"],"mappings":"4PAgBeA,eAZF,SAAAC,GAAoCA,EAAlCC,GAAkC,IAA9BC,EAA8BF,EAA9BE,KAAMC,EAAwBH,EAAxBG,MAAOC,EAAiBJ,EAAjBI,KAAMC,EAAWL,EAAXK,MAClC,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yBAAyBC,MAAO,CAACC,gBAAiBN,IAC7DC,EAAAC,EAAAC,cAAA,OAAKI,IAAG,wBAAAC,OAA0BT,EAA1B,iBAA+CU,IAAI,UAC3DR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAAA,UAAKN,GACLI,EAAAC,EAAAC,cAAA,SAAIL,OCMLY,EAbE,SAAAf,GAAc,IAAZgB,EAAYhB,EAAZgB,OACf,OACIV,EAAAC,EAAAC,cAAAF,EAAAC,EAAAU,SAAA,KACCD,EAAOE,IAAI,SAAAC,GAAC,OAAIb,EAAAC,EAAAC,cAACY,EAAD,CACjBC,IAAKF,EAAElB,GACPC,KAAMiB,EAAEjB,KACRC,MAAOgB,EAAEhB,MACTC,KAAMe,EAAEf,KACRC,MAAOc,EAAEd,YCCFiB,SARG,SAAAtB,GAAiCA,EAA/BuB,YAA+B,IAAlBC,EAAkBxB,EAAlBwB,aAC7B,OACIlB,EAAAC,EAAAC,cAAAF,EAAAC,EAAAU,SAAA,KACAX,EAAAC,EAAAC,cAAA,SAAOiB,KAAK,OAAOC,YAAY,gBAAgBC,SAAUH,OCGlDI,EARA,SAACC,GACZ,OACIvB,EAAAC,EAAAC,cAAA,OAAKC,UAAW,mBAAmBC,MAAO,CAACoB,UAAW,SAAUC,OAAQ,SACnEF,EAAMG,iBCgEnB,SAASC,EAAgBC,EAAIC,GACzB,OAAOC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,IAAQA,EAGtCK,wDAlEX,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACVC,EAAAI,EAAAC,KAAAF,OA4BJG,eAAiB,SAACC,GACdP,EAAKQ,SAAS,CAACzB,YAAawB,EAAME,OAAOC,SA5BzCV,EAAKW,MAAQ,CACTnC,OAAQ,GACRO,YAAa,IAJPiB,uDAQd,WAAoB,IAAAY,EAAAT,KAChBU,MAAM,8CACDC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAM,SAAAG,GAKC,IAFA,IAAIC,EAASC,EAAQ,IAAUC,SAEtBC,EAAI,EAAGA,EAAIJ,EAAMK,OAAQD,IAC9BJ,EAAMI,GAAN,SAAuBH,EAAOK,UAAUC,MAAM,GAC9CP,EAAMI,GAAN,KAAmBH,EAAOtD,KAAK,CAAC0D,OAAQ,KACxCL,EAAMI,GAAN,aAAAhD,OAA2BoB,EAAgB,GAAG,KAA9C,mCAAApB,OACMoB,EAAgB,GAAG,KADzB,mCAAApB,OAEMoB,EAAgB,IAAI,KAF1B,KAKJmB,EAAKJ,SAAS,CAAChC,OAAQyC,IACvBQ,QAAQC,IAAIT,2BAQ5B,WACI,IAAAU,EAA6BxB,KAAKQ,MAA3BnC,EAAPmD,EAAOnD,OAAOO,EAAd4C,EAAc5C,YACR6C,EAAiBpD,EAAOqD,OAAO,SAAAC,GACjC,OAAOA,EAAMpE,KAAKqE,cAAcC,SAASjD,EAAYgD,iBAEzD,OAAKvD,EAAO8C,OAUJxD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,cACIF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAACiE,EAAD,CAAWjD,aAAcmB,KAAKG,kBAElCxC,EAAAC,EAAAC,cAACkE,EAAD,KACIpE,EAAAC,EAAAC,cAACmE,EAAD,CAAU3D,OAAQoD,MAd1B9D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAAA,gCA1CFoE,IAAMC,WCMTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxCC,EAAAC,EAAA,GAAA5B,KAAA2B,EAAAE,KAAA,UAAqB7B,KAAK,SAAAtD,GAAiD,IAA9CoF,EAA8CpF,EAA9CoF,OAAQC,EAAsCrF,EAAtCqF,OAAQC,EAA8BtF,EAA9BsF,OAAQC,EAAsBvF,EAAtBuF,OAAQC,EAAcxF,EAAdwF,QAC3DJ,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAOR,GACPS,EAAQT,MCAdU,IAASC,OACPpF,EAAAC,EAAAC,cAACF,EAAAC,EAAMoF,WAAP,KACErF,EAAAC,EAAAC,cAACoF,EAAD,OAEFC,SAASC,eAAe,SAM1BhB","file":"static/js/main.7d0a253f.chunk.js","sourcesContent":["import React from 'react';\nimport 'animate.css';\nimport './Card.css';\n\nconst Card = ({id, name, email, hash, color}) => {\n    return (\n        <div className=\"card animate__animated\" style={{backgroundColor: color}}>\n            <img src={`https://robohash.org/${hash}?size=200x200`} alt=\"Robot\" />\n            <div className=\"cardtext\">\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    )\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots}) => {\n    return (\n        <>\n        {robots.map(r => <Card \n        key={r.id} \n        name={r.name} \n        email={r.email} \n        hash={r.hash} \n        color={r.color}/>)} \n        </>\n    )\n}\n\nexport default CardList;","import React from \"react\";\nimport \"./SearchBox.css\";\n\n\nconst SearchBox = ({searchfield, searchChange}) => {\n    return (\n        <>\n        <input type=\"text\" placeholder=\"search robots\" onChange={searchChange}/>\n        </>\n    );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div className= 'scrollbar-hidden' style={{overflowY: 'scroll', height: '87vh'}}>\n            {props.children} \n        </div>\n    )\n}\n\nexport default Scroll;","import React from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport './App.css';\n\nclass App extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            robots: [],\n            searchfield: ''\n        }\n    }\n\n    componentDidMount() {\n        fetch('https://jsonplaceholder.typicode.com/users')\n            .then(response => response.json())\n            .then( users =>\n                {\n                    /// Load and instantiate Chance\n                    var chance = require('chance').Chance();\n\n                    for (let i = 0; i < users.length; i++) { \n                        users[i][\"username\"] = chance.twitter().slice(1);\n                        users[i][\"hash\"] = chance.hash({length: 10});\n                        users[i][\"color\"] = `rgb(${randomColorChan(90,230)},\n                            ${randomColorChan(90,128)},\n                            ${randomColorChan(220,255)})`;\n                    }\n\n                    this.setState({robots: users});\n                    console.log(users);\n                });  \n    }\n\n    onSearchChange = (event) => {\n        this.setState({searchfield: event.target.value})\n    }\n\n    render() {\n        const {robots,searchfield} = this.state;\n        const filteredRobots = robots.filter(robot => {\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase());\n        })\n        if (!robots.length) {\n            return (\n                <div className=\"loading\">\n                    <h2>Loading...</h2>\n                </div>\n            )\n        }\n        else\n        {\n            return (\n                <div className=\"app\">\n                    <header>\n                        <h1>Robobook</h1>\n                        <SearchBox searchChange={this.onSearchChange}/>\n                    </header>\n                    <Scroll>\n                        <CardList robots={filteredRobots}/>\n                    </Scroll>\n                </div>\n            );\n        }\n    }\n}\n\nfunction randomColorChan(min,max) {\n    return Math.floor(Math.random() * (max - min)) + min;\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}